import { JSONSchema7 } from "json-schema";
import { EkoDialogue } from "../dialogue";
import { DialogueTool, ToolResult } from "../../types";
import { TOOL_NAME as task_planner } from "./task_planner";

export const TOOL_NAME = "executeTask";

export default class ExecuteTaskTool implements DialogueTool {
  readonly name: string = TOOL_NAME;
  readonly description: string;
  readonly parameters: JSONSchema7;
  private ekoDialogue: EkoDialogue;

  constructor(ekoDialogue: EkoDialogue) {
    this.description = `Responsible for executing the task plan generated by the ${task_planner}. Use this tool if you need to execute planned tasks.`;
    this.parameters = {
      type: "object",
      properties: {
        taskId: {
          type: "string",
          description: `Task ID, generated by the \`${task_planner}\` tool.`,
        },
      },
      required: ["taskId"],
    };
    this.ekoDialogue = ekoDialogue;
  }

  async execute(args: Record<string, unknown>): Promise<ToolResult> {
    const taskId = args.taskId as string;
    const eko = this.ekoDialogue.getEko(taskId);
    if (!eko) {
      return {
        content: [
          {
            type: "text",
            text: "Error: Task ID not found.",
          },
        ],
      };
    }
    const result = await eko.execute(taskId);
    return {
      content: [
        {
          type: "text",
          text: result.success ? result.result : "Error: " + result.result,
        },
      ],
    };
  }
}

export { ExecuteTaskTool as DeepActionTool };
